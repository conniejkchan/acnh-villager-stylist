{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","padding","display","alignItems","width","input","marginLeft","spacing","flex","textAlign","iconButton","divider","height","margin","formControl","minWidth","App","useState","villagerName","setVillagerName","villagerNameColor","setVillagerNameColor","villagerPhoto","setVillagerPhoto","villagerColors","setVillagerColors","villagerStyles","setVillagerStyles","itemName","setItemName","itemPhoto","setItemPhoto","itemColors","setItemColors","itemStyle","setItemStyle","itemVariation","setItemVariation","itemVariationList","setItemVariationList","itemPropertyList","setItemPropertyList","clothesData","itemsData","filter","item","sourceSheet","classes","getVillager","e","villagersData","map","villager","target","value","toLowerCase","name","photoImage","bubbleColor","colors","styles","getItem","style","variants","variantList","variant","push","variation","console","log","className","Grid","container","xs","noValidate","Autocomplete","options","option","onChange","event","renderInput","params","TextField","id","label","type","color","InputProps","FormControl","InputLabel","Select","onClick","preventDefault","obj","closetImage","MenuItem","src","green","red","vColor","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f48dc0ed.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport styled from 'styled-components';\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { green,red } from '@material-ui/core/colors';\nimport CheckCircleRoundedIcon from '@material-ui/icons/CheckCircleRounded';\nimport NotInterestedIcon from '@material-ui/icons/NotInterested';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nimport villagersData from './data/villagers.json';\nimport itemsData from \"./data/items.json\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: '2px 4px',\n    display: 'flex',\n    alignItems: 'center',\n    width: 400,\n  },\n  input: {\n    marginLeft: theme.spacing(1),\n    flex: 1,\n    textAlign: 'center'\n  },\n  iconButton: {\n    padding: 10,\n  },\n  divider: {\n    height: 28,\n    margin: 4,\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  }\n\n}));\n\nconst App = ({}) => {\n  const [villagerName, setVillagerName] = useState('')\n  const [villagerNameColor, setVillagerNameColor] = useState('')\n  const [villagerPhoto, setVillagerPhoto] = useState('')\n  const [villagerColors, setVillagerColors] = useState([])\n  const [villagerStyles, setVillagerStyles] = useState([])\n\n  const[itemName, setItemName] = useState('')\n  const[itemPhoto, setItemPhoto] = useState('')\n  const[itemColors, setItemColors] = useState([])\n  const[itemStyle, setItemStyle] = useState('')\n  const[itemVariation,setItemVariation] = useState('')\n  const[itemVariationList,setItemVariationList] = useState([])\n  const[itemPropertyList,setItemPropertyList] = useState([])\n  \n  // filter to only clothes items\n  const clothesData = itemsData.filter(\n  item => \n    item.sourceSheet === 'Tops' ||\n    item.sourceSheet === 'Bottoms' ||\n    item.sourceSheet === 'Dress-Up' ||\n    item.sourceSheet === 'Headwear' ||\n    item.sourceSheet === 'Accessories' ||\n    item.sourceSheet === 'Socks' ||\n    item.sourceSheet === 'Shoes' ||\n    item.sourceSheet === 'Bags'\n  );\n  \n  const classes = useStyles();\n\n  // input -> show villager pic and name\n  const getVillager = e => {\n    villagersData.map(villager => {\n      if(e.target.value.toLowerCase() === villager.name.toLowerCase()) {\n        setVillagerName(villager.name)\n        setVillagerPhoto(villager.photoImage)\n        setVillagerNameColor(villager.bubbleColor)\n        setVillagerColors(villager.colors)\n        setVillagerStyles(villager.styles)\n      }\n    })\n  }\n\n  // select -> show villager pic and name\n  const selectVillager = (event, value) => {\n    setVillagerName(value)\n    villagersData.map(villager => {\n      if(value !== null && value.toLowerCase() === villager.name.toLowerCase()) {\n        setVillagerPhoto(villager.photoImage)\n        setVillagerNameColor(villager.bubbleColor)\n        setVillagerColors(villager.colors)\n        setVillagerStyles(villager.styles)\n      }\n      else if(value === null ) {\n        setVillagerPhoto('')\n        setVillagerNameColor('')\n        setVillagerColors([])\n        setVillagerStyles([])\n      }\n    })\n  }\n\n  const getItem = e => {\n    clothesData.map(item => {\n      if(e.target.value.toLowerCase() === item.name.toLowerCase()) {\n        setItemName(item.name)\n        setItemStyle(item.style)\n        const variants = item.variants\n        setItemPropertyList(variants)\n        const variantList = []\n        variants.map(variant => {\n          variantList.push(variant.variation)\n        })\n        setItemVariationList(variantList)\n        // value is null\n        console.log(itemVariationList)\n      }\n    })\n  }\n\n  const selectItem = (event,value) => {\n    setItemName(value)\n    clothesData.map(item => {\n      if(value !== null && value.toLowerCase() === item.name.toLowerCase()) {\n        const variants = item.variants\n        setItemPropertyList(variants)\n        const variantList = []\n        variants.map(variant => {\n          variantList.push(variant.variation)\n        })\n        setItemVariationList(variantList)\n        setItemStyle(item.style)\n        // value is undefined\n        console.log(itemVariationList)\n      }\n      else if(value === null) {\n        setItemVariation('')\n        setItemPhoto('')\n        setItemStyle('')\n      }\n    })\n  }\n\n  const getItemVariation = e => {\n    // FIXME: have to search item with variant options first before items with no variants like orange hat\n    e.preventDefault()\n    clothesData.map(item => {\n    // check item\n      if(itemName === item.name) {\n        // FIXME: variant list already set previously, assigns the wrong color variant and doesnt change photo\n        console.log(itemPropertyList)\n        itemPropertyList.map( obj => {\n          // reset selection\n\n          if(e.target.value === obj.variation || obj.variation == null) {\n            setItemVariation(e.target.value)\n            setItemPhoto(obj.closetImage)\n            setItemColors(obj.colors)\n            // also set up colors fields        \n          }\n          // else if(obj.variation == null){\n          //   // only one variation\n          //   // disable the variation select\n          //   setItemVariation(e.target.value)\n          //   setItemPhoto(obj.closetImage)\n          //   setItemColors(obj.colors)\n          // }\n\n        })\n      }\n    })\n\n  };\n\n  return (\n    <>\n    <h1 className=\"text\">Animal Crossing New Horizon Villager Stylists</h1>\n    <h3 className=\"text\">Each villager has their favorite 2 clothing styles and 2 colors they prefer. Use this app to help verify if the gift aligns with the villager's clothing style and color preferences.</h3>\n    <Grid container spacing={3}>\n      <Grid item xs={6}>\n        <form noValidate>\n          <Autocomplete\n            style={{ width: 300 }}\n            options={villagersData.map((option) => option.name)}\n            onChange={selectVillager}\n            renderInput={(params) => (\n              <TextField\n                {...params}\n                className={classes.input}\n                id=\"outlined-search\"\n                label=\"Villager Name\"\n                type=\"search\"\n                variant=\"outlined\"\n                color=\"secondary\"\n                onChange={getVillager}\n                InputProps={{ ...params.InputProps, type: 'search' }}\n              />\n            )}\n          />\n        </form>\n      </Grid>\n      <Grid item xs={3}>\n        <form noValidate>\n        <Autocomplete\n            style={{ width: 300 }}\n            options={clothesData.map((option) => option.name)}\n            onChange={selectItem}\n            renderInput={(params) => (\n              <TextField\n                {...params}\n                className={classes.input}\n                id=\"outlined-search\"\n                label=\"Item Name\"\n                type=\"search\"\n                variant=\"outlined\"\n                onChange={getItem}\n                InputProps={{ ...params.InputProps, type: 'search' }}\n              />\n            )}\n          />\n        </form>\n      </Grid>\n      <Grid item xs={3}>\n      <FormControl className={classes.formControl}>\n        <InputLabel>Item Variation</InputLabel>\n        <Select\n          value={itemVariation}\n          onClick={getItemVariation}\n        >\n            <MenuItem value=\"\">None</MenuItem>\n            {itemVariationList.map(option => {\n                return (\n                  <MenuItem value={option}>{option}</MenuItem>\n                );\n              })}   \n        </Select>\n        </FormControl>\n      </Grid>\n      <Grid item xs={6}>\n        <div className=\"searchVillager\">\n          <h2 style={{color: villagerNameColor}}>{villagerName}</h2>\n          <img src={villagerPhoto} />\n          <h3>Likes: </h3>\n            {villagerStyles.map(style => {\n              return (\n                <>\n                  <li>\n                    {style}\n                  </li>\n                </>\n              );\n            })}\n            {villagerColors.map(color => {\n              return (\n                <>\n                  <li>\n                    {color}\n                  </li>\n                </>\n              );\n            })}\n        </div>\n      </Grid>\n      <Grid item xs={6}>\n        <div className=\"searchItem\">\n          <h2>Item: {itemName}</h2>\n          <img src={itemPhoto} />\n          <h3>Style: {itemStyle}</h3>\n          <h3>Colors:</h3>\n          {itemColors.map(color => {\n              return (\n                <>\n                  <li>\n                    {color}\n                  </li>\n                </>\n              );\n            })}\n        </div>\n      </Grid>\n    </Grid>\n    {/* // check matches between color and styles */}\n    <h1 className=\"text\">Stylists Recommendation:</h1>\n    <h2 className=\"text\">\n    {villagerStyles.map(style => {\n      return (\n        <>\n          {(style === itemStyle)?\n            <>\n              <li>\n                <CheckCircleRoundedIcon style={{ color: green[500] }} />\n                Style Match~\n              </li>\n            </>\n          :\n            <>\n              <li>\n                <NotInterestedIcon style={{ color: red[500] }} />\n                Style Does NOT Match\n              </li>\n            </>\n          } \n        </>\n      );\n    })}\n    {villagerColors.map(vColor => {\n      return(\n        <>\n          {(itemColors.includes(vColor))?\n            <>\n              <li>\n                <CheckCircleRoundedIcon style={{ color: green[500] }} />\n                Color Match~\n              </li>\n            </>\n          :\n            <>\n              <li>\n                  <NotInterestedIcon style={{ color: red[500] }} />\n                  Color Does NOT Match\n              </li>\n            </>\n          } \n        </>\n      );\n    })}\n    </h2>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}