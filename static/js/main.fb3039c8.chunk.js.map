{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","padding","display","alignItems","width","input","marginLeft","spacing","flex","textAlign","iconButton","divider","height","margin","App","useState","villagerName","setVillagerName","villagerNameColor","setVillagerNameColor","villagerPhoto","setVillagerPhoto","villagerColors","setVillagerColors","villagerStyles","setVillagerStyles","itemName","setItemName","classes","className","Grid","container","item","xs","noValidate","autoComplete","TextField","id","label","type","variant","color","onChange","e","villagersData","map","villager","target","value","toLowerCase","name","photoImage","bubbleColor","colors","styles","InputProps","endAdornment","InputAdornment","IconButton","itemsData","style","src","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fb3039c8.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport styled from 'styled-components';\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport SearchIcon from '@material-ui/icons/Search';\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\n\nimport villagersData from './data/villagers.json';\nimport itemsData from \"./data/items.json\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: '2px 4px',\n    display: 'flex',\n    alignItems: 'center',\n    width: 400,\n  },\n  input: {\n    marginLeft: theme.spacing(1),\n    flex: 1,\n    textAlign: 'center'\n  },\n  iconButton: {\n    padding: 10,\n  },\n  divider: {\n    height: 28,\n    margin: 4,\n  },\n\n}));\n\nconst App = ({}) => {\n  const [villagerName, setVillagerName] = useState('')\n  const [villagerNameColor, setVillagerNameColor] = useState('')\n  const [villagerPhoto, setVillagerPhoto] = useState('')\n  const [villagerColors, setVillagerColors] = useState([])\n  const [villagerStyles, setVillagerStyles] = useState([])\n\n  const[itemName, setItemName] = useState('')\n  const[itemPhoto, setItemPhoto] = useState('')\n  const[itemVariation,setItemVariation] = useState([])\n\n\n  const classes = useStyles();\n\n  // show villager pic and name\n  const getVillager = e => {\n    villagersData.map(villager => {\n      if(e.target.value.toLowerCase() === villager.name.toLowerCase()) {\n        setVillagerName(villager.name)\n        setVillagerPhoto(villager.photoImage)\n        setVillagerNameColor(villager.bubbleColor)\n        setVillagerColors(villager.colors)\n        setVillagerStyles(villager.styles)\n      }\n    })\n  }\n\n  const getItem = e => {\n    itemsData.map(item => {\n      if(e.target.value.toLowerCase() === item.name.toLowerCase()) {\n        setItemName(item.name)\n        //setItemPhoto(item)\n      }\n    })\n  }\n\n  return (\n    <>\n    <h1 className=\"header\">Animal Crossing New Horizon Villager Stylists</h1>\n    <Grid container spacing={3}>\n      <Grid item xs={6}>\n        <form noValidate autoComplete=\"off\">\n          <TextField\n            className={classes.input}\n            id=\"outlined-search\"\n            label=\"Villager Name\"\n            type=\"search\"\n            variant=\"outlined\"\n            color=\"secondary\"\n            onChange={getVillager}\n            InputProps={{\n              endAdornment: (\n                <InputAdornment>\n                  <IconButton>\n                    <SearchIcon />\n                  </IconButton>\n                </InputAdornment>\n              )\n            }}\n          />\n        </form>\n      </Grid>\n      <Grid item xs={6}>\n        <form noValidate autoComplete=\"off\">\n          <TextField\n            className={classes.input}\n            id=\"outlined-search\"\n            label=\"Item Name\"\n            type=\"search\"\n            variant=\"outlined\"\n            onChange={getItem}\n            InputProps={{\n              endAdornment: (\n                <InputAdornment>\n                  <IconButton>\n                    <SearchIcon />\n                  </IconButton>\n                </InputAdornment>\n              )\n            }}\n          />\n        </form>\n      </Grid>\n      <Grid item xs={6}>\n        <div className=\"searchVillager\">\n          <h2 style={{color: villagerNameColor}}>{villagerName}</h2>\n          <img src={villagerPhoto} />\n          <h3>likes \n            {villagerColors.map(color => {\n              return (\n                <>\n                  <li>\n                    {color}\n                  </li>\n                </>\n              );\n            })}\n            {villagerStyles.map(style => {\n            return (\n              <>\n                <li>\n                  {style}\n                </li>\n              </>\n            );\n          })}\n          </h3>\n        </div>\n      </Grid>\n      <Grid item xs={6}>\n        <div className=\"searchItem\">\n          <h2>{itemName}</h2>\n          <img src={villagerPhoto} />\n        </div>\n      </Grid>\n    </Grid>\n  \n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}